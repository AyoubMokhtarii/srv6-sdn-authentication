syntax = "proto3";

package pymerang;

import "pymerang/status_codes.proto";


/* RPC methods implementing a procedure to connect a device to a controller */

service Pymerang {
  // Register a device
  rpc RegisterDevice(RegisterDeviceRequest) returns (RegisterDeviceReply) {}
}

/* Message representing a feature supported by a device */
message Feature {
  string name = 1;
  uint32 port = 2;
}

/* Authentication data */
message AuthData {
  
}

/* Message representing a device */
message Device {
    uint32 id = 1;
    repeated Feature features = 2;    
}

/* Tunnel Mode */
enum TunnelMode {
    no_tunnel = 0;
    vxlan = 1;
    etherws = 2;
}

/* Tunnel Info */
message TunnelInfo {
    TunnelMode tunnel_mode = 1;
    uint32 device_id = 2;
    string device_vtep_ip = 3;
    string controller_vtep_ip = 4;
    uint32 vtep_mask = 5;
    string device_external_ip = 6;
    uint32 device_external_port = 7;
}

/* MAC address */
message MACAddress {
  string broadcast = 1;
  string addr = 2;
}

/* IPv4 address */
message IPv4Address {
  string broadcast = 1;
  string addr = 2;
  string netmask = 3;
}

/* IPv6 address */
message IPv6Address {
  string broadcast = 1;
  string addr = 2;
  string netmask = 3;
}

/* Interface */
message Interface {
    string name = 1;
    repeated MACAddress mac_addrs = 2;
    repeated IPv4Address ipv4_addrs = 3;
    repeated IPv6Address ipv6_addrs = 4;
}

/* RegisterDevice request message */
message RegisterDeviceRequest {
  Device device = 1;
  AuthData auth_data = 2;
  TunnelInfo tunnel_info = 3;
  repeated Interface interfaces = 4;
}

/* Device Configuration */
message DeviceConfiguration {
  
}

/* Reports the outcome of a gRPC request command */
message RegisterDeviceReply {
  StatusCode status = 1;
  DeviceConfiguration device_configuration = 2;
  TunnelInfo tunnel_info = 3;
}